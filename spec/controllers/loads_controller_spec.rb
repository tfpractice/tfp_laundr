require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe LoadsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Load. As you add validations to Load, be sure to
  # adjust the attributes here as well.
  let(:user) { create(:user) }
  let(:load) {  }
  let(:washers) { Washer.all }
  let(:load) { create(:load, weight: 9, user: user) }
  let(:washer) { create(:m_washer)}
  let(:dryer) { create(:dryer)}
  let(:sufficient_coins){12}
  let(:insufficient_coins) { 3 }
  let(:excessive_coins) { 20 }
  let(:valid_attributes) {

    # attributes_for(:load, user:user)
    {weight: 9, user: user}
    # machine: nil
  }
  before :each do
    sign_in user
  end
  # let(:valid_attributes) {
  # skip("Add a hash of attributes valid for your model")
  # }

  let(:invalid_attributes) {
    {weight: -2}

    # skip("Add a h/ash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # LoadsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all loads as @loads" do
      # load = Load.create! valid_attributes
      get :index#, {}, valid_session
      expect(assigns(:loads)).to eq([load])
    end
  end

  describe "GET #show" do
    it "assigns the requested load as @load" do
      # load = Load.create! valid_attributes
      get :show, id: load
      expect(assigns(:load)).to eq(load)
    end
  end

  describe "GET #new" do
    it "assigns a new load as @load" do
      get :new
      expect(assigns(:load)).to be_a_new(Load)
    end
  end

  describe "GET #edit" do
    it "assigns the requested load as @load" do
      # load = Load.create! valid_attributes
      get :edit,id: load
      expect(assigns(:load)).to eq(load)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Load" do
        expect {
          post :create, {:load => valid_attributes}, valid_session
        }.to change(Load, :count).by(1)
      end

      it "assigns a newly created load as @load" do
        post :create, {:load => valid_attributes}, valid_session
        expect(assigns(:load)).to be_a(Load)
        expect(assigns(:load)).to be_persisted
      end

      it "redirects to the created load" do
        post :create, {:load => valid_attributes}, valid_session
        expect(response).to redirect_to(Load.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved load as @load" do
        post :create, {:load => invalid_attributes}, valid_session
        expect(assigns(:load)).to be_a_new(Load)
      end

      it "re-renders the 'new' template" do
        post :create, {:load => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {weight: 8}
      }

      it "updates the requested load" do
        put :update, {:id => load.to_param  , :load => new_attributes}, valid_session

        load.reload

        expect(load.weight).to eq(8)

      end

      it "assigns the requested load as @load" do
        # load = Load.create! valid_attributes
        put :update, {:id => load.to_param, :load => valid_attributes}, valid_session
        expect(assigns(:load)).to eq(load)
      end

      it "redirects to the load" do
        # load = Load.create! valid_attributes
        put :update, {:id => load.to_param, :load => valid_attributes}, valid_session
        expect(response).to redirect_to(load)
      end
    end

    context "with invalid params" do
      it "assigns the load as @load" do
        # load = Load.create! valid_attributes
        put :update, {:id => load.to_param, :load => invalid_attributes}, valid_session
        expect(assigns(:load)).to eq(load)
      end

      it "re-renders the 'edit' template" do
        # load = Load.create! valid_attributes
        put :update, {:id => load.to_param, :load => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested load" do
      load = Load.create! valid_attributes
      expect {
        delete :destroy, {:id => load.to_param}, valid_session
      }.to change(Load, :count).by(-1)
    end

    it "redirects to the loads list" do
      # load = Load.create! valid_attributes
      delete :destroy, {:id => load.to_param}, valid_session
      expect(response).to redirect_to(loads_url)
    end
  end

 #describe 'PATCH #insert' do
 #  it 'sets load state to in_washer' do
 #    patch :insert, id: load, machine: washer
 #    load.reload
 #    expect(load.state).to eq("in_washer")
 #  end
 #  it 'sets load machine ' do
 #    patch :insert, id: load, machine: washer
 #    load.reload
 #    expect(load.machine).to eq(washer)
 #  end
 #  it "redirects to the loads list" do
 #    patch :insert, id: load, machine: washer
 #    expect(response).to redirect_to(load)
 #  end
 #  # it 'assigns :available_machines' do
 #    
 #  # end

 #end
end
