require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe DryersController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Dryer. As you add validations to Dryer, be sure to
  # adjust the attributes here as well.let(:user) { create(:admin) }
  let(:user) { create(:admin) }
  let(:dryers) { dryer.all }
  let(:dryer) { create(:dryer)}
  let(:valid_attributes) {
    attributes_for(:dryer)
  }
  before :each do
    sign_in user
  end

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # DryersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all dryers as @dryers" do
      # dryer = Dryer.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:dryers)).to eq([dryer])
    end
  end

  describe "GET #show" do
    it "assigns the requested dryer as @dryer" do
      # dryer = Dryer.create! valid_attributes
      get :show, {:id => dryer.to_param}, valid_session
      expect(assigns(:dryer)).to eq(dryer)
    end
  end

  describe "GET #new" do
    it "assigns a new dryer as @dryer" do
      get :new, {}, valid_session
      # puts controller.instance
      expect(assigns(:dryer)).to be_a_new(Dryer)
    end
  end

  describe "GET #edit" do
    it "assigns the requested dryer as @dryer" do
      dryer = Dryer.create! valid_attributes
      get :edit, {:id => dryer.to_param}, valid_session
      expect(assigns(:dryer)).to eq(dryer)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Dryer" do
        expect {
          post :create, {:dryer => valid_attributes}, valid_session
        }.to change(Dryer, :count).by(1)
      end

      it "assigns a newly created dryer as @dryer" do
        post :create, {:dryer => valid_attributes}, valid_session
        expect(assigns(:dryer)).to be_a(Dryer)
        expect(assigns(:dryer)).to be_persisted
      end

      it "redirects to the created dryer" do
        post :create, {:dryer => valid_attributes}, valid_session
        expect(response).to redirect_to(Dryer.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved dryer as @dryer" do
        post :create, {:dryer => invalid_attributes}, valid_session
        expect(assigns(:dryer)).to be_a_new(Dryer)
      end

      it "re-renders the 'new' template" do
        post :create, {:dryer => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested dryer" do
        dryer = Dryer.create! valid_attributes
        put :update, {:id => dryer.to_param, :dryer => new_attributes}, valid_session
        dryer.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested dryer as @dryer" do
        dryer = Dryer.create! valid_attributes
        put :update, {:id => dryer.to_param, :dryer => valid_attributes}, valid_session
        expect(assigns(:dryer)).to eq(dryer)
      end

      it "redirects to the dryer" do
        dryer = Dryer.create! valid_attributes
        put :update, {:id => dryer.to_param, :dryer => valid_attributes}, valid_session
        expect(response).to redirect_to(dryer)
      end
    end

    context "with invalid params" do
      it "assigns the dryer as @dryer" do
        dryer = Dryer.create! valid_attributes
        put :update, {:id => dryer.to_param, :dryer => invalid_attributes}, valid_session
        expect(assigns(:dryer)).to eq(dryer)
      end

      it "re-renders the 'edit' template" do
        dryer = Dryer.create! valid_attributes
        put :update, {:id => dryer.to_param, :dryer => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested dryer" do
      dryer = Dryer.create! valid_attributes
      expect {
        delete :destroy, {:id => dryer.to_param}, valid_session
      }.to change(Dryer, :count).by(-1)
    end

    it "redirects to the dryers list" do
      dryer = Dryer.create! valid_attributes
      delete :destroy, {:id => dryer.to_param}, valid_session
      expect(response).to redirect_to(dryers_url)
    end
  end
  describe 'MachineController' do
    it 'includes the MachineController Module from concerns' do
      # puts controller.class.included_modules
      expect(controller.class.included_modules).to include(MachineController)
    end

    describe 'PATCH #claim' do
      it 'sets dryer state to empty' do
        patch :claim, id: dryer

        dryer.reload
        expect(dryer.state).to eq("empty")

      end
      it 'sets dryer user to current_user' do
        patch :claim, id: dryer
        # {:id => dryer.to_param, :dryer => new_attributes}, valid_session

        # expect {
        #   patch :claim, id: dryer
        # }.to change(dryer, :state)
        dryer.reload
        expect(dryer.user).to eq(user)

      end
      it "redirects to the dryers list" do
        # dryer = dryer.create! valid_attributes
        patch :claim, id: dryer

        # delete :destroy, {:id => dryer.to_param}, valid_session
        expect(response).to redirect_to(dryer)
      end
    end

    context 'when claimed' do
      before(:each) do
        patch :claim, id: dryer
      end


      describe 'PATCH #unclaim' do
        it 'sets dryer state to available' do
          patch :unclaim, id: dryer

          dryer.reload
          expect(dryer.state).to eq("available")

        end
        it 'sets dryer user to nil' do
          patch :unclaim, id: dryer

          dryer.reload
          expect(dryer.user).to eq(nil)

        end
        it "redirects to the dryers list" do
          patch :unclaim, id: dryer

          # delete :destroy, {:id => dryer.to_param}, valid_session
          expect(response).to redirect_to(dryer)
        end
      end
      describe 'PATCH #fill' do
        it 'sets dryer state to unpaid' do
          patch :fill, id: dryer

          dryer.reload
          expect(dryer.state).to eq("unpaid")

        end

        it "redirects to the dryers list" do
          patch :fill, id: dryer

          # delete :destroy, {:id => dryer.to_param}, valid_session
          expect(response).to redirect_to(dryer)
        end
      end
      context 'when unpaid' do
        before(:each) do
          patch :fill, id: dryer
        end
        describe 'insert_coins' do
          it 'sets dryer state to ready' do

            patch :insert_coins, id: dryer

            dryer.reload
            expect(dryer.state).to eq("ready")

          end

          it "redirects to the dryers list" do
            patch :insert_coins, id: dryer

            # delete :destroy, {:id => dryer.to_param}, valid_session
            expect(response).to redirect_to(dryer)
          end
        end
        context 'when ready' do
          before(:each) do
            patch :insert_coins, id: dryer
          end
          describe 'start' do
            it 'sets dryer state to complete' do
              patch :start, id: dryer

              dryer.reload
              expect(dryer.state).to eq("complete")

            end

            it "redirects to the dryers list" do
              patch :start, id: dryer

              # delete :destroy, {:id => dryer.to_param}, valid_session
              expect(response).to redirect_to(dryer)
            end
          end
          context 'when complete' do
            before(:each) do
              patch :start, id: dryer
            end
            describe 'remove_clothes' do
              it 'sets dryer state to empty' do
                patch :remove_clothes, id: dryer

                dryer.reload
                expect(dryer.state).to eq("empty")

              end

              it "redirects to the dryers list" do
                patch :remove_clothes, id: dryer

                # delete :destroy, {:id => dryer.to_param}, valid_session
                expect(response).to redirect_to(dryer)
              end
            end
          end
        end

      end
    end
  end

end
